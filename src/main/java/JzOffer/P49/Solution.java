package JzOffer.P49;

/*
同leetcode P264
大佬思路+代码。
https://leetcode-cn.com/problems/chou-shu-lcof/solution/mian-shi-ti-49-chou-shu-dong-tai-gui-hua-qing-xi-t/
具体解释可以参考一下评论区的一个老哥，十分清楚：
//      @不是秒针：
我的一点理解： 在已有的丑数序列上每一个数都必须乘2， 乘3， 乘5， 这样才不会漏掉某些丑数。假设已有的丑数序列为[1, 2, 3, ..., n1, n2],
如果单纯的让每个丑数乘2， 乘3， 乘5顺序排列的话肯定会有问题，

比如如果按照这样的顺序排列下去肯定有问题[1*2, 1*3, 1*5, 2*2, 2*3, 2*5, 3*2, 3*3, 3*5, ... , n1 *2, n1 * 3, n1 * 5, n2 * 2, n3* 3, n2 * 5]，
因为后面乘2的数据可能会比前面乘3乘5的数据要小，那这个乘2的数应该排在他们的前面， 后面乘3的数据也可能比前面乘5的数据要小，
那这个乘3的数应该排在他们的前面。

那怎么办呢，每个数都必须乘2， 乘3， 乘5这样才能保证求出所有的丑数，而且还要保证丑数的顺序，这个改如何同时实现呢？

通过观察网上的各个题解，终于找到了办法，那就是记录每个丑数是否已经被乘2， 乘3， 乘5了， 具体的做法是

设置3个索引a, b, c，分别记录前几个数已经被乘2， 乘3， 乘5了，比如a表示前(a-1)个数都已经乘过一次2了，下次应该乘2的是第a个数；
b表示前(b-1)个数都已经乘过一次3了，下次应该乘3的是第b个数；c表示前(c-1)个数都已经乘过一次5了，下次应该乘5的是第c个数；

对于某个状态下的丑数序列，我们知道此时第a个数还没有乘2(有没有乘3或者乘5不知道）， 第b个数还没有乘3(有没有乘2或者乘5不知道），
第c个数还没有乘5(有没有乘2或者乘3不知道), 下一个丑数一定是从第a丑数乘2， 第b个数乘3， 第c个数乘5中获得，他们三者最小的那个就是下个丑数。

求得下个丑数后就得判断这个丑数是谁，是某个数通过乘2得到的，还是某个数乘3得到的，又或是说某个数通过乘5得到的。我们可以比较一下这个新的丑数等于究竟是等于第a个丑数乘2,
还是第b个数乘3， 还是第c个数乘5， 通过比较我们肯定可以知道这个新的丑数到底是哪个数通过乘哪个数得到的。假设这个新的丑数是通过第a个数乘2得到的，
说明此时第a个数已经通过乘2得到了一个新的丑数，那下个通过乘2得到一个新的丑数的数应该是第(a+1)个数，此时我们可以说前 a 个数都已经乘过一次2了，
下次应该乘2的是第 （a+1） 个数, 所以a++；如果新的丑数是通过第b个数乘3得到的, 说明此时第 b个数已经通过乘3得到了一个新的丑数，
那下个需要通过乘3得到一个新的丑数的数应该是第(b+1)个数，此时我们可以说前 b 个数都已经乘过一次3了，下次应该乘3的是第 （b+1） 个数,
所以 b++；同理，如果这个这个新的丑数是通过第c个数乘5得到的, 那么c++;

但是注意，如果第a个数乘2后等于第b个数乘3，或者等于第c个数乘5， 说明这个新的丑数是有两种或者三种方式可以得到，这时应该给得到这个新丑数的组合对应的索引都加一，
比如新丑数是第a个数乘2后和第b个数乘3得到的，那么 a 和 b都应该加一， 因为此时第a个数已经通过乘2得到了一个新的丑数，第b个数已经通过乘3得到了一个新的丑数,
只不过这两个数相等而已。所以我们给计数器加一的时候不能使用 if else else if， 而应该使用if, if, if, 这样才不会把应该加一的计数器漏掉

经过n次循环，就能得到第n 个丑数了。
//

除了1以外，每个丑数都是前面的某个丑数乘以2、3或者5得来的，所以我们可以以动态规划的方式，用前面的丑数乘2、3或者5，一个一个的得到后面的丑数。
为了保证得到的丑数序列是递增的，用三个指针分别标记乘2、乘3、乘5的序列现在走到哪个位置了，每次都取三个序列中最小的值作为下一个丑数。

时间复杂度：O(N)，N=n，动态规划遍历长度为n的dp列表。                        打败99.06%
空间复杂度：O(N)，dp数组大小为N。                                           打败38.19%
*/

class Solution {
	public int nthUglyNumber(int n) {
		int a = 0, b = 0, c = 0;       //位置标记，a表示前a-1个数已经乘2后生成新的丑数了，接下来应该是第a个数乘2了。b对应3，c对应5，相当于“三指针法”！
		int[] dp = new int[n];         //动态规划数组，dp[n]表示第n+1个丑数。
		dp[0] = 1;
		for(int i = 1; i < n; i++){
			int n2 = dp[a] * 2, n3 = dp[b] * 3, n5 = dp[c] * 5;     //此时第a个数还没有乘2，同理，第b个数未乘3，第c个数未乘5。下一个丑数一定从dp[a]*2、dp[b]*3以及dp[c]*5中取得
			dp[i] = Math.min(Math.min(n2, n3), n5);                 //因为我们是从小到大排，所以要取三个数中最小者。
			if(dp[i] == n2) a++;                                    //用了谁，谁的指针就后移1位。
			if(dp[i] == n3) b++;                                    //但是特殊情况是：n2、n3和n5有可能是相等的。这说明本丑数可以通过一种以上的方式得到，这些方式都是有效的，对应的指针都要后移1位。
			if(dp[i] == n5) c++;
		}

		return dp[n-1];
	}
}
